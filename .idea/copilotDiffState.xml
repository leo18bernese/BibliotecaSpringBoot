<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/DataLoader.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/DataLoader.java" />
              <option name="originalContent" value="package me.leoo.springboot.libri.libri;&#10;&#10;import me.leoo.springboot.libri.buono.Buono;&#10;import me.leoo.springboot.libri.buono.BuonoRepository;&#10;import me.leoo.springboot.libri.buono.StatoBuono;&#10;import me.leoo.springboot.libri.carrello.Carrello;&#10;import me.leoo.springboot.libri.carrello.CarrelloRepository;&#10;import me.leoo.springboot.libri.libri.autore.Autore;&#10;import me.leoo.springboot.libri.libri.autore.AutoreService;&#10;import me.leoo.springboot.libri.recensioni.Recensione;&#10;import me.leoo.springboot.libri.recensioni.RecensioneRepository;&#10;import me.leoo.springboot.libri.spedizione.SpedizioneIndirizzo;&#10;import me.leoo.springboot.libri.utente.Utente;&#10;import me.leoo.springboot.libri.utente.UtenteRepository;&#10;import me.leoo.springboot.libri.utente.UtenteService;&#10;import me.leoo.springboot.libri.utils.Sconto;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.CommandLineRunner;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;@Component&#10;public class DataLoader implements CommandLineRunner {&#10;&#10;    @Autowired&#10;    private LibroRepository libroRepository;&#10;&#10;    @Autowired&#10;    private UtenteRepository utenteRepository;&#10;&#10;    @Autowired&#10;    private CarrelloRepository carrelloRepository;&#10;&#10;    @Autowired&#10;    private RecensioneRepository recensioneRepository;&#10;&#10;    @Autowired&#10;    private UtenteService utenteService;&#10;&#10;    @Autowired&#10;    private BuonoRepository buonoRepository;&#10;&#10;    @Autowired&#10;    private AutoreService autoreService;&#10;&#10;    @Override&#10;    public void run(String... args) throws Exception {&#10;        if (libroRepository.existsById(1L)) {&#10;            System.out.println(&quot;Libri già caricati nel database, salto il caricamento&quot;);&#10;            return;&#10;        }&#10;&#10;        // Crea gli autori prima di creare i libri&#10;        Autore tolkien = autoreService.getOrCreate(&quot;J.R.R. Tolkien&quot;, &quot;Scrittore britannico, autore del Signore degli Anelli e Lo Hobbit&quot;);&#10;        Autore herbert = autoreService.getOrCreate(&quot;Frank Herbert&quot;, &quot;Scrittore americano di fantascienza, famoso per la saga di Dune&quot;);&#10;        Autore brown = autoreService.getOrCreate(&quot;Dan Brown&quot;, &quot;Scrittore americano famoso per i suoi thriller che mescolano storia, arte e religione&quot;);&#10;        Autore rowling = autoreService.getOrCreate(&quot;J.K. Rowling&quot;, &quot;Scrittrice britannica, creatrice della saga di Harry Potter&quot;);&#10;        Autore harari = autoreService.getOrCreate(&quot;Yuval Noah Harari&quot;, &quot;Storico e saggista israeliano, professore universitario e autore di bestseller&quot;);&#10;        Autore tamaro = autoreService.getOrCreate(&quot;Susanna Tamaro&quot;, &quot;Scrittrice italiana, famosa per i suoi romanzi emotivi e introspettivi&quot;);&#10;        Autore manzoni = autoreService.getOrCreate(&quot;Alessandro Manzoni&quot;, &quot;Scrittore e poeta italiano del XIX secolo, autore de I Promessi Sposi&quot;);&#10;        Autore schildt = autoreService.getOrCreate(&quot;Herbert Schildt&quot;, &quot;Programmatore e autore americano, esperto di linguaggi di programmazione&quot;);&#10;        Autore autoriVari = autoreService.getOrCreate(&quot;AA.VV.&quot;, &quot;Autori Vari - Raccolta di ricette della tradizione culinaria italiana&quot;);&#10;        Autore carr = autoreService.getOrCreate(&quot;Caleb Carr&quot;, &quot;Scrittore americano specializzato in thriller storici e psicologici&quot;);&#10;&#10;        // Crea i libri utilizzando il costruttore con oggetti Autore&#10;        libroRepository.save(new Libro(&quot;Il Signore degli Anelli&quot;, tolkien, &quot;Fantasy&quot;, 1954, 1200, &quot;George Allen &amp; Unwin&quot;, &quot;Italiano&quot;, &quot;9788845292613&quot;, 50, 25.00));&#10;        libroRepository.save(new Libro(&quot;Dune&quot;, herbert, &quot;Fantascienza&quot;, 1965, 800, &quot;Chilton Books&quot;, &quot;Italiano&quot;, &quot;9788834710186&quot;, 30, 20.50));&#10;        libroRepository.save(new Libro(&quot;Il Codice Da Vinci&quot;, brown, &quot;Thriller&quot;, 2003, 592, &quot;Doubleday&quot;, &quot;Italiano&quot;, &quot;9788804519962&quot;, 75, 15.75));&#10;        libroRepository.save(new Libro(&quot;Harry Potter e la Pietra Filosofale&quot;, rowling, &quot;Fantasy per ragazzi&quot;, 1997, 320, &quot;Bloomsbury Publishing&quot;, &quot;Italiano&quot;, &quot;9788869186641&quot;, 100, 12.99));&#10;        libroRepository.save(new Libro(&quot;Sapiens: Da animali a dèi&quot;, harari, &quot;Saggistica storica&quot;, 2011, 544, &quot;Bompiani&quot;, &quot;Italiano&quot;, &quot;9788845296833&quot;, 40, 18.90));&#10;        libroRepository.save(new Libro(&quot;Va' dove ti porta il cuore&quot;, tamaro, &quot;Romanzo&quot;, 1994, 192, &quot;Baldini &amp; Castoldi&quot;, &quot;Italiano&quot;, &quot;9788884901962&quot;, 60, 10.00));&#10;        libroRepository.save(new Libro(&quot;I Promessi Sposi&quot;, manzoni, &quot;Romanzo storico&quot;, 1840, 700, &quot;Ferrara&quot;, &quot;Italiano&quot;, &quot;9788809766940&quot;, 25, 14.50));&#10;        libroRepository.save(new Libro(&quot;Introduzione alla Programmazione in Java&quot;, schildt, &quot;Informatica&quot;, 2019, 1000, &quot;McGraw-Hill Education&quot;, &quot;Italiano&quot;, &quot;9780078022171&quot;, 15, 45.00));&#10;        Libro l = libroRepository.save(new Libro(&quot;La Cucina Italiana: Il Ricettario Completo&quot;, autoriVari, &quot;Cucina&quot;, 2010, 600, &quot;Editoriale Domus&quot;, &quot;Italiano&quot;, &quot;9788872126285&quot;, 20, 30.00));&#10;        libroRepository.save(new Libro(&quot;L'Alienista&quot;, carr, &quot;Thriller psicologico&quot;, 1994, 480, &quot;Rizzoli&quot;, &quot;Italiano&quot;, &quot;9788817024469&quot;, 35, 16.25));&#10;&#10;        List&lt;Libro&gt; libri = libroRepository.findAll();&#10;        System.out.println(&quot;Libri caricati nel database: &quot; + libri.size());&#10;&#10;        SpedizioneIndirizzo ind1 = new SpedizioneIndirizzo(&quot;Mario Rossi&quot;, &quot;Via Roma 1&quot;, &quot;Milano&quot;, &quot;MI&quot;, &quot;20100&quot;, &quot;1234567890&quot;);&#10;        SpedizioneIndirizzo ind2 = new SpedizioneIndirizzo(&quot;Luigi Bianchi&quot;, &quot;Via Milano 2&quot;, &quot;Roma&quot;, &quot;RM&quot;, &quot;00100&quot;, &quot;0987654321&quot;);&#10;&#10;        Utente u = new Utente(&quot;Daniel18&quot;, &quot;ciao1234&quot;, &quot;Daniel&quot;, &quot;Bello&quot;, &quot;daniel@gmail.com&quot;);&#10;        u.addToWishlist(l);&#10;        u.addIndirizzo(ind1);&#10;        u.addIndirizzo(ind2);&#10;        Utente uu = utenteService.register(u);&#10;&#10;        Carrello carrello = new Carrello(uu);&#10;        carrelloRepository.save(carrello);&#10;&#10;        for (Libro libro : libri) {&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                Recensione recensione = new Recensione(libro.getId(), uu.getId(), &quot;Molto bello&quot;, &quot;Ottimo libro, lo consiglio&quot;, 4, true, true);&#10;                Recensione r = recensioneRepository.save(recensione);&#10;&#10;                libro.getRecensioni().add(r.getId());&#10;            }&#10;&#10;            libroRepository.save(libro);&#10;        }&#10;&#10;&#10;        // Buono sconto del 20% senza data di scadenza&#10;        Buono buono1 = new Buono(&#10;                &quot;SCONTO20&quot;,&#10;                new Sconto(20, 0),&#10;                new Date(),&#10;                null,&#10;                0,&#10;                5,&#10;                50,&#10;                false,&#10;                null,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono1);&#10;&#10;// Buono sconto fisso di 15€ con scadenza tra 30 giorni&#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.add(Calendar.DAY_OF_MONTH, 30);&#10;        Date scadenza = calendar.getTime();&#10;        Buono buono2 = new Buono(&#10;                &quot;MENO15EURO&quot;,&#10;                new Sconto(0, 15),&#10;                new Date(),&#10;                scadenza,&#10;                0,&#10;                1,&#10;                100,&#10;                false,&#10;                uu,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono2);&#10;&#10;// Buono sconto del 50% per un utente specifico&#10;        Buono buono3 = new Buono(&#10;                &quot;VIP50&quot;,&#10;                new Sconto(50, 0),&#10;                new Date(),&#10;                null,&#10;                0,&#10;                1,&#10;                0,&#10;                false,&#10;                uu,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono3);&#10;&#10;// Buono sconto di 5€ cumulabile con altri buoni&#10;        Buono buono4 = new Buono(&#10;                &quot;EXTRA5&quot;,&#10;                new Sconto(0, 5),&#10;                new Date(),&#10;                null,&#10;                0,&#10;                10,&#10;                20,&#10;                true,&#10;                null,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono4);&#10;&#10;// Buono sconto 30% non ancora attivo (futuro)&#10;        Calendar futureStart = Calendar.getInstance();&#10;        futureStart.add(Calendar.MONTH, 1);&#10;        Calendar futureEnd = Calendar.getInstance();&#10;        futureEnd.add(Calendar.MONTH, 2);&#10;        Buono buono5 = new Buono(&#10;                &quot;ESTATE30&quot;,&#10;                new Sconto(30, 0),&#10;                futureStart.getTime(),&#10;                futureEnd.getTime(),&#10;                0,&#10;                50,&#10;                0,&#10;                false,&#10;                null,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono5);&#10;&#10;&#10;        System.out.println(&quot;Libri caricati nel database&quot;);&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package me.leoo.springboot.libri.libri;&#10;&#10;import me.leoo.springboot.libri.buono.Buono;&#10;import me.leoo.springboot.libri.buono.BuonoRepository;&#10;import me.leoo.springboot.libri.buono.StatoBuono;&#10;import me.leoo.springboot.libri.carrello.Carrello;&#10;import me.leoo.springboot.libri.carrello.CarrelloRepository;&#10;import me.leoo.springboot.libri.recensioni.Recensione;&#10;import me.leoo.springboot.libri.recensioni.RecensioneRepository;&#10;import me.leoo.springboot.libri.spedizione.SpedizioneIndirizzo;&#10;import me.leoo.springboot.libri.utente.Utente;&#10;import me.leoo.springboot.libri.utente.UtenteRepository;&#10;import me.leoo.springboot.libri.utente.UtenteService;&#10;import me.leoo.springboot.libri.utils.Sconto;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.CommandLineRunner;&#10;import org.springframework.core.annotation.Order;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;@Component&#10;@Order(2) // Esegue dopo LibroDataLoader&#10;public class DataLoader implements CommandLineRunner {&#10;&#10;    @Autowired&#10;    private LibroRepository libroRepository;&#10;&#10;    @Autowired&#10;    private UtenteRepository utenteRepository;&#10;&#10;    @Autowired&#10;    private CarrelloRepository carrelloRepository;&#10;&#10;    @Autowired&#10;    private RecensioneRepository recensioneRepository;&#10;&#10;    @Autowired&#10;    private UtenteService utenteService;&#10;&#10;    @Autowired&#10;    private BuonoRepository buonoRepository;&#10;&#10;    @Override&#10;    public void run(String... args) throws Exception {&#10;        if (utenteRepository.findByUsername(&quot;Daniel18&quot;).isPresent()) {&#10;            System.out.println(&quot;Dati utenti e buoni già caricati nel database, salto il caricamento&quot;);&#10;            return;&#10;        }&#10;&#10;        System.out.println(&quot;Caricamento utenti, carrelli, recensioni e buoni nel database...&quot;);&#10;&#10;        // Crea utente di test&#10;        SpedizioneIndirizzo ind1 = new SpedizioneIndirizzo(&quot;Mario Rossi&quot;, &quot;Via Roma 1&quot;, &quot;Milano&quot;, &quot;MI&quot;, &quot;20100&quot;, &quot;1234567890&quot;);&#10;        SpedizioneIndirizzo ind2 = new SpedizioneIndirizzo(&quot;Luigi Bianchi&quot;, &quot;Via Milano 2&quot;, &quot;Roma&quot;, &quot;RM&quot;, &quot;00100&quot;, &quot;0987654321&quot;);&#10;&#10;        Utente u = new Utente(&quot;Daniel18&quot;, &quot;ciao1234&quot;, &quot;Daniel&quot;, &quot;Bello&quot;, &quot;daniel@gmail.com&quot;);&#10;        &#10;        // Aggiungi un libro alla wishlist se esistono libri&#10;        List&lt;Libro&gt; libri = libroRepository.findAll();&#10;        if (!libri.isEmpty()) {&#10;            u.addToWishlist(libri.get(0)); // Aggiungi il primo libro alla wishlist&#10;        }&#10;        &#10;        u.addIndirizzo(ind1);&#10;        u.addIndirizzo(ind2);&#10;        Utente uu = utenteService.register(u);&#10;&#10;        // Crea carrello per l'utente&#10;        Carrello carrello = new Carrello(uu);&#10;        carrelloRepository.save(carrello);&#10;&#10;        // Crea recensioni per i libri esistenti&#10;        for (Libro libro : libri) {&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                Recensione recensione = new Recensione(libro.getId(), uu.getId(), &quot;Molto bello&quot;, &quot;Ottimo libro, lo consiglio&quot;, 4, true, true);&#10;                Recensione r = recensioneRepository.save(recensione);&#10;&#10;                libro.getRecensioni().add(r.getId());&#10;            }&#10;            libroRepository.save(libro);&#10;        }&#10;&#10;        // Crea buoni sconto&#10;        // Buono sconto del 20% senza data di scadenza&#10;        Buono buono1 = new Buono(&#10;                &quot;SCONTO20&quot;,&#10;                new Sconto(20, 0),&#10;                new Date(),&#10;                null,&#10;                0,&#10;                5,&#10;                50,&#10;                false,&#10;                null,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono1);&#10;&#10;        // Buono sconto fisso di 15€ con scadenza tra 30 giorni&#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.add(Calendar.DAY_OF_MONTH, 30);&#10;        Date scadenza = calendar.getTime();&#10;        Buono buono2 = new Buono(&#10;                &quot;MENO15EURO&quot;,&#10;                new Sconto(0, 15),&#10;                new Date(),&#10;                scadenza,&#10;                0,&#10;                1,&#10;                100,&#10;                false,&#10;                uu,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono2);&#10;&#10;        // Buono sconto del 50% per un utente specifico&#10;        Buono buono3 = new Buono(&#10;                &quot;VIP50&quot;,&#10;                new Sconto(50, 0),&#10;                new Date(),&#10;                null,&#10;                0,&#10;                1,&#10;                0,&#10;                false,&#10;                uu,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono3);&#10;&#10;        // Buono sconto di 5€ cumulabile con altri buoni&#10;        Buono buono4 = new Buono(&#10;                &quot;EXTRA5&quot;,&#10;                new Sconto(0, 5),&#10;                new Date(),&#10;                null,&#10;                0,&#10;                10,&#10;                20,&#10;                true,&#10;                null,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono4);&#10;&#10;        // Buono sconto 30% non ancora attivo (futuro)&#10;        Calendar futureStart = Calendar.getInstance();&#10;        futureStart.add(Calendar.MONTH, 1);&#10;        Calendar futureEnd = Calendar.getInstance();&#10;        futureEnd.add(Calendar.MONTH, 2);&#10;        Buono buono5 = new Buono(&#10;                &quot;ESTATE30&quot;,&#10;                new Sconto(30, 0),&#10;                futureStart.getTime(),&#10;                futureEnd.getTime(),&#10;                0,&#10;                50,&#10;                0,&#10;                false,&#10;                null,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono5);&#10;&#10;        System.out.println(&quot;Dati utenti e buoni caricati nel database&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/Libro.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/Libro.java" />
              <option name="originalContent" value="package me.leoo.springboot.libri.libri;&#10;&#10;import com.fasterxml.jackson.annotation.JsonIgnore;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;import lombok.Setter;&#10;import lombok.extern.slf4j.Slf4j;&#10;import me.leoo.springboot.libri.libri.autore.Autore;&#10;import me.leoo.springboot.libri.libri.descrizione.LibroDimension;&#10;import me.leoo.springboot.libri.libri.descrizione.LibroInfo;&#10;import me.leoo.springboot.libri.libri.images.ImageUtils;&#10;import me.leoo.springboot.libri.libri.miscellaneous.DeliveryPackage;&#10;import me.leoo.springboot.libri.rifornimento.Rifornimento;&#10;import org.springframework.http.ResponseEntity;&#10;&#10;import java.nio.file.Files;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Random;&#10;&#10;@Slf4j&#10;@Getter&#10;@Setter&#10;@Entity&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;public class Libro {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.AUTO)&#10;    private Long id;&#10;&#10;    private String titolo;&#10;&#10;    @ManyToOne(optional = false, cascade = CascadeType.PERSIST)&#10;    private Autore autore;&#10;&#10;    private String genere;&#10;    private int annoPubblicazione;&#10;    private int numeroPagine;&#10;    private String editore;&#10;    private String lingua;&#10;    private String isbn;&#10;&#10;    // dimensioni&#10;    private LibroDimension dimensioni = new LibroDimension();&#10;&#10;    private Date dataAggiunta = new Date();&#10;&#10;    @ElementCollection(fetch = FetchType.EAGER)&#10;    private List&lt;Long&gt; recensioni = List.of();&#10;&#10;    @OneToOne(cascade = CascadeType.PERSIST, optional = false)&#10;    private Rifornimento rifornimento;&#10;&#10;    @OneToOne(mappedBy = &quot;libro&quot;, cascade = CascadeType.ALL, orphanRemoval = true)&#10;    private LibroInfo descrizione;&#10;&#10;&#10;    public static final String IMAGE_DIR = &quot;backend/src/main/resources/static/images&quot;;&#10;&#10;    public Libro(String titolo, Autore autore, String genere, int annoPubblicazione, int numeroPagine, String editore, String lingua, String isbn, int quantita, double prezzo) {&#10;        this.titolo = titolo;&#10;        this.autore = autore;&#10;        this.genere = genere;&#10;        this.annoPubblicazione = annoPubblicazione;&#10;        this.numeroPagine = numeroPagine;&#10;        this.editore = editore;&#10;        this.lingua = lingua;&#10;        this.isbn = isbn;&#10;&#10;        double length = new Random().nextInt(10, 20);&#10;        double width = length + new Random().nextInt(5, 10);&#10;        double height = new Random().nextInt(1, 5);&#10;        this.dimensioni = new LibroDimension(length, width, height, 0.5);&#10;&#10;&#10;        this.descrizione = new LibroInfo(this, &quot;&quot;&quot;&#10;                Un libro scritto per raccontare una storia, condividere conoscenza o semplicemente per intrattenere.&#10;                &lt;br&gt;&lt;br&gt;&#10;                &#10;                Lo scopo di un libro è quello di trasmettere idee, emozioni e informazioni attraverso le parole scritte.&#10;                Quindi, un libro può essere un romanzo, un saggio, una biografia o qualsiasi altra forma di narrazione scritta.&#10;                &#10;                &quot;&quot;&quot;);&#10;&#10;        this.rifornimento = new Rifornimento(quantita, prezzo);&#10;    }&#10;&#10;&#10;    public Libro updateFrom(Libro libro) {&#10;        this.titolo = libro.getTitolo();&#10;        this.autore = libro.getAutore();&#10;        this.genere = libro.getGenere();&#10;        this.annoPubblicazione = libro.getAnnoPubblicazione();&#10;        this.numeroPagine = libro.getNumeroPagine();&#10;        this.editore = libro.getEditore();&#10;        this.lingua = libro.getLingua();&#10;        this.isbn = libro.getIsbn();&#10;&#10;        return this;&#10;    }&#10;&#10;    public LibroController.LiteBookResponse toLiteBookResponse() {&#10;        return new LibroController.LiteBookResponse(&#10;                this.id,&#10;                this.titolo,&#10;                this.autore != null ? this.autore.getNome() : null,&#10;                this.annoPubblicazione,&#10;                this.rifornimento.getPrezzoTotale(),&#10;                this.rifornimento.getSconto()&#10;        );&#10;    }&#10;&#10;    @JsonIgnore&#10;    public boolean isInStock() {&#10;        return rifornimento != null &amp;&amp; rifornimento.getDisponibili() &gt; 0;&#10;    }&#10;&#10;    @JsonIgnore&#10;    public boolean isInOfferta() {&#10;        return rifornimento != null &amp;&amp; rifornimento.getSconto() != null;&#10;    }&#10;&#10;    public DeliveryPackage getDeliveryPackage() {&#10;        return DeliveryPackage.getMostSuitable(&#10;                dimensioni.length(),&#10;                dimensioni.width(),&#10;                dimensioni.height(),&#10;                dimensioni.weight()&#10;        );&#10;    }&#10;&#10;    public double getVolume() {&#10;        return dimensioni.length() * dimensioni.width() * dimensioni.height();&#10;    }&#10;&#10;    public ResponseEntity&lt;byte[]&gt; getPictureResponse(int index) {&#10;        List&lt;Path&gt; paths = getAllImages();&#10;&#10;        if (index &lt; 0 || index &gt;= paths.size()) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        Path path = paths.get(index);&#10;&#10;        try {&#10;            return ImageUtils.getImageResponse(path);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;&#10;    public List&lt;Path&gt; getAllImages() {&#10;        try {&#10;            String finalPath = IMAGE_DIR + &quot;/&quot; + id;&#10;            Path dirPath = Paths.get(finalPath);&#10;&#10;            System.out.println(&quot;does &quot; + dirPath + &quot; exist? &quot; + Files.exists(dirPath));&#10;&#10;            if (!Files.exists(dirPath) || !Files.isDirectory(dirPath)) {&#10;                return List.of();&#10;            }&#10;&#10;            return Files.list(dirPath)&#10;                    .filter(Files::isRegularFile)&#10;                    .toList();&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Error while getting all images for book with ID: &quot; + id, e);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package me.leoo.springboot.libri.libri;&#10;&#10;import com.fasterxml.jackson.annotation.JsonIgnore;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;import lombok.Setter;&#10;import lombok.extern.slf4j.Slf4j;&#10;import me.leoo.springboot.libri.libri.autore.Autore;&#10;import me.leoo.springboot.libri.libri.descrizione.LibroDimension;&#10;import me.leoo.springboot.libri.libri.descrizione.LibroInfo;&#10;import me.leoo.springboot.libri.libri.images.ImageUtils;&#10;import me.leoo.springboot.libri.libri.miscellaneous.DeliveryPackage;&#10;import me.leoo.springboot.libri.rifornimento.Rifornimento;&#10;import org.springframework.http.ResponseEntity;&#10;&#10;import java.nio.file.Files;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Random;&#10;&#10;@Slf4j&#10;@Getter&#10;@Setter&#10;@Entity&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;public class Libro {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.AUTO)&#10;    private Long id;&#10;&#10;    private String titolo;&#10;&#10;    @ManyToOne(optional = false)&#10;    private Autore autore;&#10;&#10;    private String genere;&#10;    private int annoPubblicazione;&#10;    private int numeroPagine;&#10;    private String editore;&#10;    private String lingua;&#10;    private String isbn;&#10;&#10;    // dimensioni&#10;    private LibroDimension dimensioni = new LibroDimension();&#10;&#10;    private Date dataAggiunta = new Date();&#10;&#10;    @ElementCollection(fetch = FetchType.EAGER)&#10;    private List&lt;Long&gt; recensioni = List.of();&#10;&#10;    @OneToOne(cascade = CascadeType.PERSIST, optional = false)&#10;    private Rifornimento rifornimento;&#10;&#10;    @OneToOne(mappedBy = &quot;libro&quot;, cascade = CascadeType.ALL, orphanRemoval = true)&#10;    private LibroInfo descrizione;&#10;&#10;&#10;    public static final String IMAGE_DIR = &quot;backend/src/main/resources/static/images&quot;;&#10;&#10;    public Libro(String titolo, Autore autore, String genere, int annoPubblicazione, int numeroPagine, String editore, String lingua, String isbn, int quantita, double prezzo) {&#10;        this.titolo = titolo;&#10;        this.autore = autore;&#10;        this.genere = genere;&#10;        this.annoPubblicazione = annoPubblicazione;&#10;        this.numeroPagine = numeroPagine;&#10;        this.editore = editore;&#10;        this.lingua = lingua;&#10;        this.isbn = isbn;&#10;&#10;        double length = new Random().nextInt(10, 20);&#10;        double width = length + new Random().nextInt(5, 10);&#10;        double height = new Random().nextInt(1, 5);&#10;        this.dimensioni = new LibroDimension(length, width, height, 0.5);&#10;&#10;&#10;        this.descrizione = new LibroInfo(this, &quot;&quot;&quot;&#10;                Un libro scritto per raccontare una storia, condividere conoscenza o semplicemente per intrattenere.&#10;                &lt;br&gt;&lt;br&gt;&#10;                &#10;                Lo scopo di un libro è quello di trasmettere idee, emozioni e informazioni attraverso le parole scritte.&#10;                Quindi, un libro può essere un romanzo, un saggio, una biografia o qualsiasi altra forma di narrazione scritta.&#10;                &#10;                &quot;&quot;&quot;);&#10;&#10;        this.rifornimento = new Rifornimento(quantita, prezzo);&#10;    }&#10;&#10;&#10;    public Libro updateFrom(Libro libro) {&#10;        this.titolo = libro.getTitolo();&#10;        this.autore = libro.getAutore();&#10;        this.genere = libro.getGenere();&#10;        this.annoPubblicazione = libro.getAnnoPubblicazione();&#10;        this.numeroPagine = libro.getNumeroPagine();&#10;        this.editore = libro.getEditore();&#10;        this.lingua = libro.getLingua();&#10;        this.isbn = libro.getIsbn();&#10;&#10;        return this;&#10;    }&#10;&#10;    public LibroController.LiteBookResponse toLiteBookResponse() {&#10;        return new LibroController.LiteBookResponse(&#10;                this.id,&#10;                this.titolo,&#10;                this.autore != null ? this.autore.getNome() : null,&#10;                this.annoPubblicazione,&#10;                this.rifornimento.getPrezzoTotale(),&#10;                this.rifornimento.getSconto()&#10;        );&#10;    }&#10;&#10;    @JsonIgnore&#10;    public boolean isInStock() {&#10;        return rifornimento != null &amp;&amp; rifornimento.getDisponibili() &gt; 0;&#10;    }&#10;&#10;    @JsonIgnore&#10;    public boolean isInOfferta() {&#10;        return rifornimento != null &amp;&amp; rifornimento.getSconto() != null;&#10;    }&#10;&#10;    public DeliveryPackage getDeliveryPackage() {&#10;        return DeliveryPackage.getMostSuitable(&#10;                dimensioni.length(),&#10;                dimensioni.width(),&#10;                dimensioni.height(),&#10;                dimensioni.weight()&#10;        );&#10;    }&#10;&#10;    public double getVolume() {&#10;        return dimensioni.length() * dimensioni.width() * dimensioni.height();&#10;    }&#10;&#10;    public ResponseEntity&lt;byte[]&gt; getPictureResponse(int index) {&#10;        List&lt;Path&gt; paths = getAllImages();&#10;&#10;        if (index &lt; 0 || index &gt;= paths.size()) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        Path path = paths.get(index);&#10;&#10;        try {&#10;            return ImageUtils.getImageResponse(path);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;&#10;    public List&lt;Path&gt; getAllImages() {&#10;        try {&#10;            String finalPath = IMAGE_DIR + &quot;/&quot; + id;&#10;            Path dirPath = Paths.get(finalPath);&#10;&#10;            System.out.println(&quot;does &quot; + dirPath + &quot; exist? &quot; + Files.exists(dirPath));&#10;&#10;            if (!Files.exists(dirPath) || !Files.isDirectory(dirPath)) {&#10;                return List.of();&#10;            }&#10;&#10;            return Files.list(dirPath)&#10;                    .filter(Files::isRegularFile)&#10;                    .toList();&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Error while getting all images for book with ID: &quot; + id, e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/LibroController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/LibroController.java" />
              <option name="originalContent" value="package me.leoo.springboot.libri.libri;&#10;&#10;import lombok.extern.slf4j.Slf4j;&#10;import me.leoo.springboot.libri.libri.autore.AutoreRepository;&#10;import me.leoo.springboot.libri.libri.autore.AutoreService;&#10;import me.leoo.springboot.libri.libri.search.RicercaLibriResponse;&#10;import me.leoo.springboot.libri.libri.search.SearchService;&#10;import me.leoo.springboot.libri.utils.Sconto;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.*;&#10;import java.util.stream.Collectors;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/libri&quot;)&#10;public class LibroController {&#10;&#10;    @Autowired&#10;    private LibroRepository libroRepository;&#10;&#10;    @Autowired&#10;    private SearchService searchService;&#10;&#10;    @Autowired&#10;    private AutoreRepository autoreRepository;&#10;&#10;    // DTO per le risposte&#10;    public record LiteBookResponse(Long libroId, String titolo, String autore, int annoPubblicazione, double prezzo,&#10;                                   Sconto sconto) {&#10;    }&#10;&#10;    // Tutti i libri&#10;    @GetMapping&#10;    public Iterable&lt;Libro&gt; getLibri() {&#10;        return libroRepository.findAll();&#10;    }&#10;&#10;    // ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Libro&gt; getLibroById(@PathVariable Long id) {&#10;&#10;        Optional&lt;Libro&gt; libroOptional = libroRepository.findById(id);&#10;        if (libroOptional.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;&#10;&#10;        try {&#10;            Libro libro = libroOptional.get();&#10;&#10;            return ResponseEntity.ok(libro);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;       /* return libroRepository.findById(id)&#10;                .orElse(null);&#10;                //.orElseThrow(() -&gt; new RuntimeException(&quot;Libro non trovato&quot;));*/&#10;    }&#10;&#10;    @GetMapping(&quot;/lite/{id}&quot;)&#10;    public ResponseEntity&lt;LiteBookResponse&gt; getLibroLiteById(@PathVariable Long id) {&#10;        try {&#10;            Libro libro = libroRepository.findById(id)&#10;                    .orElseThrow();&#10;&#10;            LiteBookResponse response = libro.toLiteBookResponse();&#10;&#10;            return ResponseEntity.ok(response);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/exists/{id}&quot;)&#10;    public boolean existsLibro(@PathVariable Long id) {&#10;        return libroRepository.existsById(id);&#10;    }&#10;&#10;    // Crea libro&#10;    @PostMapping&#10;    public Libro createLibro(@RequestBody Libro libro) {&#10;        return libroRepository.save(libro);&#10;    }&#10;&#10;    // Modifica libro&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Libro updateLibro(@PathVariable Long id, @RequestBody Libro libro) {&#10;        Libro libroToUpdate = libroRepository.findById(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Libro non trovato&quot;));&#10;&#10;        libroToUpdate = libroToUpdate.updateFrom(libro);&#10;&#10;        return libroRepository.save(libroToUpdate);&#10;    }&#10;&#10;    // Cancella libro&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void deleteLibro(@PathVariable Long id) {&#10;        libroRepository.deleteById(id);&#10;    }&#10;&#10;    // Cerca per titolo&#10;&#10;    @GetMapping(&quot;/search/{keyword}&quot;)&#10;    public Iterable&lt;Libro&gt; searchLibri(@PathVariable String keyword,&#10;                                       @RequestParam(required = false) boolean exact) {&#10;        if (exact) {&#10;            return libroRepository.findByTitoloEqualsIgnoreCase(keyword);&#10;        } else {&#10;            return libroRepository.findByTitoloIsContainingIgnoreCase(keyword);&#10;        }&#10;    }&#10;&#10;    // Cerca per autore&#10;    @GetMapping(&quot;/autore/{autore}&quot;)&#10;    public Iterable&lt;Libro&gt; searchByAutore(@PathVariable String autore,&#10;                                          @RequestParam(required = false) boolean exact) {&#10;        if (exact) {&#10;            return libroRepository.findByAutore(autore);&#10;        } else {&#10;            return libroRepository.findByAutoreContaining(autore);&#10;        }&#10;    }&#10;&#10;    // Cerca per genere&#10;    @GetMapping(&quot;/genere/{genere}&quot;)&#10;    public Iterable&lt;Libro&gt; searchByGenere(@PathVariable String genere) {&#10;        return libroRepository.findByGenere(genere);&#10;    }&#10;&#10;    // Advanced search&#10;    @GetMapping(&quot;/advanced&quot;)&#10;    public Iterable&lt;Libro&gt; advancedSearch(@RequestParam(required = false) String titolo,&#10;                                          @RequestParam(required = false) String genere,&#10;                                          @RequestParam(required = false) String autore) {&#10;        return libroRepository.advanceSearch(titolo, genere, autore);&#10;    }&#10;&#10;    @GetMapping(&quot;/ricerca&quot;)&#10;    public ResponseEntity&lt;RicercaLibriResponse&gt; cercaLibri(&#10;            @RequestParam(required = false) String q,&#10;            @RequestParam(required = false) Double prezzoMin,&#10;            @RequestParam(required = false) Double prezzoMax,&#10;            @RequestParam(defaultValue = &quot;popolaritaDesc&quot;) String ordinamento,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int pagina,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int elementiPerPagina,&#10;            @RequestParam Map&lt;String, String&gt; allParams) {&#10;&#10;        System.out.println(&quot;pagina: &quot; + pagina + &quot;, elementiPerPagina: &quot; + elementiPerPagina);&#10;&#10;        // Estrai e gestisci filtri multipli dal formato filtro_categoria=valore1,valore2,valore3&#10;        Map&lt;String, List&lt;String&gt;&gt; filtriMultipli = estraiFiltriMultipli(allParams);&#10;&#10;        Pageable pageable = PageRequest.of(pagina, elementiPerPagina, getSort(ordinamento));&#10;        RicercaLibriResponse risultati = searchService.cercaLibri(&#10;                q, prezzoMin, prezzoMax, filtriMultipli, pageable);&#10;&#10;        return ResponseEntity.ok(risultati);&#10;    }&#10;&#10;    private Map&lt;String, List&lt;String&gt;&gt; estraiFiltriMultipli(Map&lt;String, String&gt; allParams) {&#10;        Map&lt;String, List&lt;String&gt;&gt; filtriMultipli = new HashMap&lt;&gt;();&#10;&#10;        // Parametri standard da escludere&#10;        Set&lt;String&gt; parametriStandard = Set.of(&quot;q&quot;,  &quot;prezzoMin&quot;, &quot;prezzoMax&quot;,&#10;                &quot;ordinamento&quot;, &quot;pagina&quot;, &quot;elementiPerPagina&quot;);&#10;&#10;        for (Map.Entry&lt;String, String&gt; entry : allParams.entrySet()) {&#10;            String key = entry.getKey();&#10;            String value = entry.getValue();&#10;&#10;            // Salta i parametri standard&#10;            if (parametriStandard.contains(key)) {&#10;                continue;&#10;            }&#10;&#10;            // Gestisce i filtri con formato: categoria=valore1,valore2,valore3&#10;            List&lt;String&gt; valori = Arrays.stream(value.split(&quot;,&quot;))&#10;                    .map(String::trim)&#10;                    .filter(v -&gt; !v.isEmpty())&#10;                    .collect(Collectors.toList());&#10;&#10;            if (!valori.isEmpty()) {&#10;                // Aggiungi il filtro solo se ha valori&#10;                filtriMultipli.put(key, valori);&#10;            }&#10;        }&#10;&#10;        return filtriMultipli;&#10;    }&#10;&#10;    private Sort getSort(String ordinamento) {&#10;        if (&quot;prezzo-cresc&quot;.equals(ordinamento)) {&#10;            return Sort.by(Sort.Direction.ASC, &quot;prezzo&quot;);&#10;        } else if (&quot;prezzo-desc&quot;.equals(ordinamento)) {&#10;            return Sort.by(Sort.Direction.DESC, &quot;prezzo&quot;);&#10;        }&#10;        return Sort.by(Sort.Direction.DESC, &quot;id&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package me.leoo.springboot.libri.libri;&#10;&#10;import lombok.extern.slf4j.Slf4j;&#10;import me.leoo.springboot.libri.libri.autore.AutoreRepository;&#10;import me.leoo.springboot.libri.libri.autore.AutoreService;&#10;import me.leoo.springboot.libri.libri.search.RicercaLibriResponse;&#10;import me.leoo.springboot.libri.libri.search.SearchService;&#10;import me.leoo.springboot.libri.utils.Sconto;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.*;&#10;import java.util.stream.Collectors;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/libri&quot;)&#10;public class LibroController {&#10;&#10;    @Autowired&#10;    private LibroRepository libroRepository;&#10;&#10;    @Autowired&#10;    private SearchService searchService;&#10;&#10;    @Autowired&#10;    private AutoreRepository autoreRepository;&#10;&#10;    @Autowired&#10;    private AutoreService autoreService;&#10;&#10;    // DTO per le risposte&#10;    public record LiteBookResponse(Long libroId, String titolo, String autore, int annoPubblicazione, double prezzo,&#10;                                   Sconto sconto) {&#10;    }&#10;&#10;    // Tutti i libri&#10;    @GetMapping&#10;    public Iterable&lt;Libro&gt; getLibri() {&#10;        return libroRepository.findAll();&#10;    }&#10;&#10;    // ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Libro&gt; getLibroById(@PathVariable Long id) {&#10;&#10;        Optional&lt;Libro&gt; libroOptional = libroRepository.findById(id);&#10;        if (libroOptional.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;&#10;&#10;        try {&#10;            Libro libro = libroOptional.get();&#10;&#10;            return ResponseEntity.ok(libro);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;       /* return libroRepository.findById(id)&#10;                .orElse(null);&#10;                //.orElseThrow(() -&gt; new RuntimeException(&quot;Libro non trovato&quot;));*/&#10;    }&#10;&#10;    @GetMapping(&quot;/lite/{id}&quot;)&#10;    public ResponseEntity&lt;LiteBookResponse&gt; getLibroLiteById(@PathVariable Long id) {&#10;        try {&#10;            Libro libro = libroRepository.findById(id)&#10;                    .orElseThrow();&#10;&#10;            LiteBookResponse response = libro.toLiteBookResponse();&#10;&#10;            return ResponseEntity.ok(response);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/exists/{id}&quot;)&#10;    public boolean existsLibro(@PathVariable Long id) {&#10;        return libroRepository.existsById(id);&#10;    }&#10;&#10;    // Crea libro&#10;    @PostMapping&#10;    public Libro createLibro(@RequestBody Libro libro) {&#10;        // Usa AutoreService per gestire l'autore con getOrCreate&#10;        if (libro.getAutore() != null) {&#10;            libro.setAutore(autoreService.getOrCreate(libro.getAutore()));&#10;        }&#10;        return libroRepository.save(libro);&#10;    }&#10;&#10;    // Modifica libro&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Libro updateLibro(@PathVariable Long id, @RequestBody Libro libro) {&#10;        Libro libroToUpdate = libroRepository.findById(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Libro non trovato&quot;));&#10;&#10;        // Usa AutoreService per gestire l'autore con getOrCreate&#10;        if (libro.getAutore() != null) {&#10;            libro.setAutore(autoreService.getOrCreate(libro.getAutore()));&#10;        }&#10;&#10;        libroToUpdate = libroToUpdate.updateFrom(libro);&#10;&#10;        return libroRepository.save(libroToUpdate);&#10;    }&#10;&#10;    // Cancella libro&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void deleteLibro(@PathVariable Long id) {&#10;        libroRepository.deleteById(id);&#10;    }&#10;&#10;    // Cerca per titolo&#10;&#10;    @GetMapping(&quot;/search/{keyword}&quot;)&#10;    public Iterable&lt;Libro&gt; searchLibri(@PathVariable String keyword,&#10;                                       @RequestParam(required = false) boolean exact) {&#10;        if (exact) {&#10;            return libroRepository.findByTitoloEqualsIgnoreCase(keyword);&#10;        } else {&#10;            return libroRepository.findByTitoloIsContainingIgnoreCase(keyword);&#10;        }&#10;    }&#10;&#10;    // Cerca per autore&#10;    @GetMapping(&quot;/autore/{autore}&quot;)&#10;    public Iterable&lt;Libro&gt; searchByAutore(@PathVariable String autore,&#10;                                          @RequestParam(required = false) boolean exact) {&#10;        if (exact) {&#10;            return libroRepository.findByAutore(autore);&#10;        } else {&#10;            return libroRepository.findByAutoreContaining(autore);&#10;        }&#10;    }&#10;&#10;    // Cerca per genere&#10;    @GetMapping(&quot;/genere/{genere}&quot;)&#10;    public Iterable&lt;Libro&gt; searchByGenere(@PathVariable String genere) {&#10;        return libroRepository.findByGenere(genere);&#10;    }&#10;&#10;    // Advanced search&#10;    @GetMapping(&quot;/advanced&quot;)&#10;    public Iterable&lt;Libro&gt; advancedSearch(@RequestParam(required = false) String titolo,&#10;                                          @RequestParam(required = false) String genere,&#10;                                          @RequestParam(required = false) String autore) {&#10;        return libroRepository.advanceSearch(titolo, genere, autore);&#10;    }&#10;&#10;    @GetMapping(&quot;/ricerca&quot;)&#10;    public ResponseEntity&lt;RicercaLibriResponse&gt; cercaLibri(&#10;            @RequestParam(required = false) String q,&#10;            @RequestParam(required = false) Double prezzoMin,&#10;            @RequestParam(required = false) Double prezzoMax,&#10;            @RequestParam(defaultValue = &quot;popolaritaDesc&quot;) String ordinamento,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int pagina,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int elementiPerPagina,&#10;            @RequestParam Map&lt;String, String&gt; allParams) {&#10;&#10;        System.out.println(&quot;pagina: &quot; + pagina + &quot;, elementiPerPagina: &quot; + elementiPerPagina);&#10;&#10;        // Estrai e gestisci filtri multipli dal formato filtro_categoria=valore1,valore2,valore3&#10;        Map&lt;String, List&lt;String&gt;&gt; filtriMultipli = estraiFiltriMultipli(allParams);&#10;&#10;        Pageable pageable = PageRequest.of(pagina, elementiPerPagina, getSort(ordinamento));&#10;        RicercaLibriResponse risultati = searchService.cercaLibri(&#10;                q, prezzoMin, prezzoMax, filtriMultipli, pageable);&#10;&#10;        return ResponseEntity.ok(risultati);&#10;    }&#10;&#10;    private Map&lt;String, List&lt;String&gt;&gt; estraiFiltriMultipli(Map&lt;String, String&gt; allParams) {&#10;        Map&lt;String, List&lt;String&gt;&gt; filtriMultipli = new HashMap&lt;&gt;();&#10;&#10;        // Parametri standard da escludere&#10;        Set&lt;String&gt; parametriStandard = Set.of(&quot;q&quot;,  &quot;prezzoMin&quot;, &quot;prezzoMax&quot;,&#10;                &quot;ordinamento&quot;, &quot;pagina&quot;, &quot;elementiPerPagina&quot;);&#10;&#10;        for (Map.Entry&lt;String, String&gt; entry : allParams.entrySet()) {&#10;            String key = entry.getKey();&#10;            String value = entry.getValue();&#10;&#10;            // Salta i parametri standard&#10;            if (parametriStandard.contains(key)) {&#10;                continue;&#10;            }&#10;&#10;            // Gestisce i filtri con formato: categoria=valore1,valore2,valore3&#10;            List&lt;String&gt; valori = Arrays.stream(value.split(&quot;,&quot;))&#10;                    .map(String::trim)&#10;                    .filter(v -&gt; !v.isEmpty())&#10;                    .collect(Collectors.toList());&#10;&#10;            if (!valori.isEmpty()) {&#10;                // Aggiungi il filtro solo se ha valori&#10;                filtriMultipli.put(key, valori);&#10;            }&#10;        }&#10;&#10;        return filtriMultipli;&#10;    }&#10;&#10;    private Sort getSort(String ordinamento) {&#10;        if (&quot;prezzo-cresc&quot;.equals(ordinamento)) {&#10;            return Sort.by(Sort.Direction.ASC, &quot;prezzo&quot;);&#10;        } else if (&quot;prezzo-desc&quot;.equals(ordinamento)) {&#10;            return Sort.by(Sort.Direction.DESC, &quot;prezzo&quot;);&#10;        }&#10;        return Sort.by(Sort.Direction.DESC, &quot;id&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/LibroDataLoader.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/LibroDataLoader.java" />
              <option name="updatedContent" value="package me.leoo.springboot.libri.libri;&#10;&#10;import me.leoo.springboot.libri.libri.autore.Autore;&#10;import me.leoo.springboot.libri.libri.autore.AutoreService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.CommandLineRunner;&#10;import org.springframework.core.annotation.Order;&#10;import org.springframework.stereotype.Component;&#10;&#10;@Component&#10;@Order(1) // Esegue prima degli altri DataLoader&#10;public class LibroDataLoader implements CommandLineRunner {&#10;&#10;    @Autowired&#10;    private LibroRepository libroRepository;&#10;&#10;    @Autowired&#10;    private AutoreService autoreService;&#10;&#10;    @Override&#10;    public void run(String... args) throws Exception {&#10;        if (libroRepository.existsById(1L)) {&#10;            System.out.println(&quot;Libri già caricati nel database, salto il caricamento&quot;);&#10;            return;&#10;        }&#10;&#10;        System.out.println(&quot;Caricamento libri e autori nel database...&quot;);&#10;&#10;        // Crea gli autori prima di creare i libri&#10;        Autore tolkien = autoreService.getOrCreate(&quot;J.R.R. Tolkien&quot;, &quot;Scrittore britannico, autore del Signore degli Anelli e Lo Hobbit&quot;);&#10;        Autore herbert = autoreService.getOrCreate(&quot;Frank Herbert&quot;, &quot;Scrittore americano di fantascienza, famoso per la saga di Dune&quot;);&#10;        Autore brown = autoreService.getOrCreate(&quot;Dan Brown&quot;, &quot;Scrittore americano famoso per i suoi thriller che mescolano storia, arte e religione&quot;);&#10;        Autore rowling = autoreService.getOrCreate(&quot;J.K. Rowling&quot;, &quot;Scrittrice britannica, creatrice della saga di Harry Potter&quot;);&#10;        Autore harari = autoreService.getOrCreate(&quot;Yuval Noah Harari&quot;, &quot;Storico e saggista israeliano, professore universitario e autore di bestseller&quot;);&#10;        Autore tamaro = autoreService.getOrCreate(&quot;Susanna Tamaro&quot;, &quot;Scrittrice italiana, famosa per i suoi romanzi emotivi e introspettivi&quot;);&#10;        Autore manzoni = autoreService.getOrCreate(&quot;Alessandro Manzoni&quot;, &quot;Scrittore e poeta italiano del XIX secolo, autore de I Promessi Sposi&quot;);&#10;        Autore schildt = autoreService.getOrCreate(&quot;Herbert Schildt&quot;, &quot;Programmatore e autore americano, esperto di linguaggi di programmazione&quot;);&#10;        Autore autoriVari = autoreService.getOrCreate(&quot;AA.VV.&quot;, &quot;Autori Vari - Raccolta di ricette della tradizione culinaria italiana&quot;);&#10;        Autore carr = autoreService.getOrCreate(&quot;Caleb Carr&quot;, &quot;Scrittore americano specializzato in thriller storici e psicologici&quot;);&#10;&#10;        // Crea i libri utilizzando il costruttore con oggetti Autore&#10;        libroRepository.save(new Libro(&quot;Il Signore degli Anelli&quot;, tolkien, &quot;Fantasy&quot;, 1954, 1200, &quot;George Allen &amp; Unwin&quot;, &quot;Italiano&quot;, &quot;9788845292613&quot;, 50, 25.00));&#10;        libroRepository.save(new Libro(&quot;Dune&quot;, herbert, &quot;Fantascienza&quot;, 1965, 800, &quot;Chilton Books&quot;, &quot;Italiano&quot;, &quot;9788834710186&quot;, 30, 20.50));&#10;        libroRepository.save(new Libro(&quot;Il Codice Da Vinci&quot;, brown, &quot;Thriller&quot;, 2003, 592, &quot;Doubleday&quot;, &quot;Italiano&quot;, &quot;9788804519962&quot;, 75, 15.75));&#10;        libroRepository.save(new Libro(&quot;Harry Potter e la Pietra Filosofale&quot;, rowling, &quot;Fantasy per ragazzi&quot;, 1997, 320, &quot;Bloomsbury Publishing&quot;, &quot;Italiano&quot;, &quot;9788869186641&quot;, 100, 12.99));&#10;        libroRepository.save(new Libro(&quot;Sapiens: Da animali a dèi&quot;, harari, &quot;Saggistica storica&quot;, 2011, 544, &quot;Bompiani&quot;, &quot;Italiano&quot;, &quot;9788845296833&quot;, 40, 18.90));&#10;        libroRepository.save(new Libro(&quot;Va' dove ti porta il cuore&quot;, tamaro, &quot;Romanzo&quot;, 1994, 192, &quot;Baldini &amp; Castoldi&quot;, &quot;Italiano&quot;, &quot;9788884901962&quot;, 60, 10.00));&#10;        libroRepository.save(new Libro(&quot;I Promessi Sposi&quot;, manzoni, &quot;Romanzo storico&quot;, 1840, 700, &quot;Ferrara&quot;, &quot;Italiano&quot;, &quot;9788809766940&quot;, 25, 14.50));&#10;        libroRepository.save(new Libro(&quot;Introduzione alla Programmazione in Java&quot;, schildt, &quot;Informatica&quot;, 2019, 1000, &quot;McGraw-Hill Education&quot;, &quot;Italiano&quot;, &quot;9780078022171&quot;, 15, 45.00));&#10;        libroRepository.save(new Libro(&quot;La Cucina Italiana: Il Ricettario Completo&quot;, autoriVari, &quot;Cucina&quot;, 2010, 600, &quot;Editoriale Domus&quot;, &quot;Italiano&quot;, &quot;9788872126285&quot;, 20, 30.00));&#10;        libroRepository.save(new Libro(&quot;L'Alienista&quot;, carr, &quot;Thriller psicologico&quot;, 1994, 480, &quot;Rizzoli&quot;, &quot;Italiano&quot;, &quot;9788817024469&quot;, 35, 16.25));&#10;&#10;        System.out.println(&quot;Libri e autori caricati nel database: &quot; + libroRepository.count() + &quot; libri&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/autore/AutoreController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/autore/AutoreController.java" />
              <option name="originalContent" value="package me.leoo.springboot.libri.libri.autore;&#10;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/autori&quot;)&#10;public class AutoreController {&#10;&#10;    @Autowired&#10;    private AutoreRepository autoreRepository;&#10;&#10;    @Autowired&#10;    private AutoreService autoreService;&#10;&#10;    // DTO per le richieste di creazione/modifica&#10;    public record AutoreRequest(String nome, String descrizione) {}&#10;&#10;    // DTO per le risposte&#10;    public record AutoreResponse(Long id, String nome, String descrizione) {&#10;   &#10;        public static AutoreResponse from(Autore autore) {&#10;            return new AutoreResponse(autore.getId(), autore.getNome(), autore.getDescrizione());&#10;        }&#10;    }&#10;&#10;    // Ottieni tutti gli autori&#10;    @GetMapping&#10;    public List&lt;AutoreResponse&gt; getAllAutori() {&#10;        log.info(&quot;Richiesta per ottenere tutti gli autori&quot;);&#10;        return autoreRepository.findAll()&#10;                .stream()&#10;                .map(AutoreResponse::from)&#10;                .toList();&#10;    }&#10;&#10;    // Ottieni autore per ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;AutoreResponse&gt; getAutoreById(@PathVariable Long id) {&#10;        log.info(&quot;Richiesta per ottenere autore con ID: {}&quot;, id);&#10;        &#10;        Optional&lt;Autore&gt; autoreOptional = autoreRepository.findById(id);&#10;        if (autoreOptional.isEmpty()) {&#10;            log.warn(&quot;Autore con ID {} non trovato&quot;, id);&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        return ResponseEntity.ok(AutoreResponse.from(autoreOptional.get()));&#10;    }&#10;&#10;    // Cerca autori per nome (ricerca parziale)&#10;    @GetMapping(&quot;/search&quot;)&#10;    public List&lt;AutoreResponse&gt; searchAutori(@RequestParam String nome) {&#10;        log.info(&quot;Ricerca autori con nome contenente: {}&quot;, nome);&#10;        return autoreRepository.findByNomeContainingIgnoreCase(nome)&#10;                .stream()&#10;                .map(AutoreResponse::from)&#10;                .toList();&#10;    }&#10;&#10;    // Ottieni autore per nome esatto&#10;    @GetMapping(&quot;/nome/{nome}&quot;)&#10;    public ResponseEntity&lt;AutoreResponse&gt; getAutoreByNome(@PathVariable String nome) {&#10;        log.info(&quot;Richiesta per ottenere autore con nome: {}&quot;, nome);&#10;        &#10;        Optional&lt;Autore&gt; autoreOptional = autoreRepository.findByNome(nome);&#10;        if (autoreOptional.isEmpty()) {&#10;            log.warn(&quot;Autore con nome '{}' non trovato&quot;, nome);&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        return ResponseEntity.ok(AutoreResponse.from(autoreOptional.get()));&#10;    }&#10;&#10;    // Crea nuovo autore&#10;    @PostMapping&#10;    public ResponseEntity&lt;AutoreResponse&gt; createAutore(@RequestBody AutoreRequest request) {&#10;        log.info(&quot;Richiesta per creare nuovo autore: {}&quot;, request.nome());&#10;        &#10;        // Validazione input&#10;        if (request.nome() == null || request.nome().isBlank()) {&#10;            log.warn(&quot;Tentativo di creare autore senza nome&quot;);&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;&#10;        // Controlla se esiste già un autore con questo nome&#10;        if (autoreRepository.findByNome(request.nome()).isPresent()) {&#10;            log.warn(&quot;Tentativo di creare autore duplicato: {}&quot;, request.nome());&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;&#10;        Autore nuovoAutore = new Autore(request.nome(), request.descrizione());&#10;        Autore autoreSalvato = autoreRepository.save(nuovoAutore);&#10;        &#10;        log.info(&quot;Autore creato con successo: ID {}, Nome '{}'&quot;, autoreSalvato.getId(), autoreSalvato.getNome());&#10;        return ResponseEntity.ok(AutoreResponse.from(autoreSalvato));&#10;    }&#10;&#10;    // Modifica autore esistente&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;AutoreResponse&gt; updateAutore(@PathVariable Long id, @RequestBody AutoreRequest request) {&#10;        log.info(&quot;Richiesta per modificare autore con ID: {}&quot;, id);&#10;        &#10;        Optional&lt;Autore&gt; autoreOptional = autoreRepository.findById(id);&#10;        if (autoreOptional.isEmpty()) {&#10;            log.warn(&quot;Tentativo di modificare autore inesistente con ID: {}&quot;, id);&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        // Validazione input&#10;        if (request.nome() == null || request.nome().isBlank()) {&#10;            log.warn(&quot;Tentativo di modificare autore {} senza nome&quot;, id);&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;&#10;        Autore autore = autoreOptional.get();&#10;        &#10;        // Controlla se il nuovo nome è già usato da un altro autore&#10;        Optional&lt;Autore&gt; autoreConStessoNome = autoreRepository.findByNome(request.nome());&#10;        if (autoreConStessoNome.isPresent() &amp;&amp; !autoreConStessoNome.get().getId().equals(id)) {&#10;            log.warn(&quot;Tentativo di modificare autore {} con nome già esistente: {}&quot;, id, request.nome());&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;&#10;        // Aggiorna i campi&#10;        autore.setNome(request.nome());&#10;        autore.setDescrizione(request.descrizione());&#10;        &#10;        Autore autoreSalvato = autoreRepository.save(autore);&#10;        &#10;        log.info(&quot;Autore modificato con successo: ID {}, Nome '{}'&quot;, autoreSalvato.getId(), autoreSalvato.getNome());&#10;        return ResponseEntity.ok(AutoreResponse.from(autoreSalvato));&#10;    }&#10;&#10;    // Cancella autore&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteAutore(@PathVariable Long id) {&#10;        log.info(&quot;Richiesta per cancellare autore con ID: {}&quot;, id);&#10;        &#10;        if (!autoreRepository.existsById(id)) {&#10;            log.warn(&quot;Tentativo di cancellare autore inesistente con ID: {}&quot;, id);&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        autoreRepository.deleteById(id);&#10;        log.info(&quot;Autore con ID {} cancellato con successo&quot;, id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    // Ottieni o crea autore (endpoint che usa il servizio)&#10;    @PostMapping(&quot;/get-or-create&quot;)&#10;    public ResponseEntity&lt;AutoreResponse&gt; getOrCreateAutore(@RequestBody AutoreRequest request) {&#10;        log.info(&quot;Richiesta getOrCreate per autore: {}&quot;, request.nome());&#10;        &#10;        if (request.nome() == null || request.nome().isBlank()) {&#10;            log.warn(&quot;Tentativo di getOrCreate autore senza nome&quot;);&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;&#10;        Autore autore = autoreService.getOrCreate(request.nome(), request.descrizione());&#10;        &#10;        if (autore == null) {&#10;            log.error(&quot;Errore nel getOrCreate per autore: {}&quot;, request.nome());&#10;            return ResponseEntity.internalServerError().build();&#10;        }&#10;&#10;        log.info(&quot;GetOrCreate completato per autore: ID {}, Nome '{}'&quot;, autore.getId(), autore.getNome());&#10;        return ResponseEntity.ok(AutoreResponse.from(autore));&#10;    }&#10;&#10;    // Conta il numero totale di autori&#10;    @GetMapping(&quot;/count&quot;)&#10;    public long countAutori() {&#10;        long count = autoreRepository.count();&#10;        log.info(&quot;Richiesta conteggio autori: {}&quot;, count);&#10;        return count;&#10;" />
              <option name="updatedContent" value="package me.leoo.springboot.libri.libri.autore;&#10;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/autori&quot;)&#10;public class AutoreController {&#10;&#10;    @Autowired&#10;    private AutoreRepository autoreRepository;&#10;&#10;    @Autowired&#10;    private AutoreService autoreService;&#10;&#10;    // DTO per le richieste di creazione/modifica&#10;    public record AutoreRequest(String nome, String descrizione) {}&#10;&#10;    // DTO per le risposte&#10;    public record AutoreResponse(Long id, String nome, String descrizione) {&#10;   &#10;        public static AutoreResponse from(Autore autore) {&#10;            return new AutoreResponse(autore.getId(), autore.getNome(), autore.getDescrizione());&#10;        }&#10;    }&#10;&#10;    // Ottieni tutti gli autori&#10;    @GetMapping&#10;    public List&lt;AutoreResponse&gt; getAllAutori() {&#10;        log.info(&quot;Richiesta per ottenere tutti gli autori&quot;);&#10;        return autoreRepository.findAll()&#10;                .stream()&#10;                .map(AutoreResponse::from)&#10;                .toList();&#10;    }&#10;&#10;    // Ottieni autore per ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;AutoreResponse&gt; getAutoreById(@PathVariable Long id) {&#10;        log.info(&quot;Richiesta per ottenere autore con ID: {}&quot;, id);&#10;        &#10;        Optional&lt;Autore&gt; autoreOptional = autoreRepository.findById(id);&#10;        if (autoreOptional.isEmpty()) {&#10;            log.warn(&quot;Autore con ID {} non trovato&quot;, id);&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        return ResponseEntity.ok(AutoreResponse.from(autoreOptional.get()));&#10;    }&#10;&#10;    // Cerca autori per nome (ricerca parziale)&#10;    @GetMapping(&quot;/search&quot;)&#10;    public List&lt;AutoreResponse&gt; searchAutori(@RequestParam String nome) {&#10;        log.info(&quot;Ricerca autori con nome contenente: {}&quot;, nome);&#10;        return autoreRepository.findByNomeContainingIgnoreCase(nome)&#10;                .stream()&#10;                .map(AutoreResponse::from)&#10;                .toList();&#10;    }&#10;&#10;    // Ottieni autore per nome esatto&#10;    @GetMapping(&quot;/nome/{nome}&quot;)&#10;    public ResponseEntity&lt;AutoreResponse&gt; getAutoreByNome(@PathVariable String nome) {&#10;        log.info(&quot;Richiesta per ottenere autore con nome: {}&quot;, nome);&#10;        &#10;        Optional&lt;Autore&gt; autoreOptional = autoreRepository.findByNome(nome);&#10;        if (autoreOptional.isEmpty()) {&#10;            log.warn(&quot;Autore con nome '{}' non trovato&quot;, nome);&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        return ResponseEntity.ok(AutoreResponse.from(autoreOptional.get()));&#10;    }&#10;&#10;    // Crea nuovo autore&#10;    @PostMapping&#10;    public ResponseEntity&lt;AutoreResponse&gt; createAutore(@RequestBody AutoreRequest request) {&#10;        log.info(&quot;Richiesta per creare nuovo autore: {}&quot;, request.nome());&#10;        &#10;        // Validazione input&#10;        if (request.nome() == null || request.nome().isBlank()) {&#10;            log.warn(&quot;Tentativo di creare autore senza nome&quot;);&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;&#10;        // Controlla se esiste già un autore con questo nome&#10;        if (autoreRepository.findByNome(request.nome()).isPresent()) {&#10;            log.warn(&quot;Tentativo di creare autore duplicato: {}&quot;, request.nome());&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;&#10;        Autore nuovoAutore = new Autore(request.nome(), request.descrizione());&#10;        Autore autoreSalvato = autoreRepository.save(nuovoAutore);&#10;        &#10;        log.info(&quot;Autore creato con successo: ID {}, Nome '{}'&quot;, autoreSalvato.getId(), autoreSalvato.getNome());&#10;        return ResponseEntity.ok(AutoreResponse.from(autoreSalvato));&#10;    }&#10;&#10;    // Modifica autore esistente&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;AutoreResponse&gt; updateAutore(@PathVariable Long id, @RequestBody AutoreRequest request) {&#10;        log.info(&quot;Richiesta per modificare autore con ID: {}&quot;, id);&#10;        &#10;        Optional&lt;Autore&gt; autoreOptional = autoreRepository.findById(id);&#10;        if (autoreOptional.isEmpty()) {&#10;            log.warn(&quot;Tentativo di modificare autore inesistente con ID: {}&quot;, id);&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        // Validazione input&#10;        if (request.nome() == null || request.nome().isBlank()) {&#10;            log.warn(&quot;Tentativo di modificare autore {} senza nome&quot;, id);&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;&#10;        Autore autore = autoreOptional.get();&#10;        &#10;        // Controlla se il nuovo nome è già usato da un altro autore&#10;        Optional&lt;Autore&gt; autoreConStessoNome = autoreRepository.findByNome(request.nome());&#10;        if (autoreConStessoNome.isPresent() &amp;&amp; !autoreConStessoNome.get().getId().equals(id)) {&#10;            log.warn(&quot;Tentativo di modificare autore {} con nome già esistente: {}&quot;, id, request.nome());&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;&#10;        // Aggiorna i campi&#10;        autore.setNome(request.nome());&#10;        autore.setDescrizione(request.descrizione());&#10;        &#10;        Autore autoreSalvato = autoreRepository.save(autore);&#10;        &#10;        log.info(&quot;Autore modificato con successo: ID {}, Nome '{}'&quot;, autoreSalvato.getId(), autoreSalvato.getNome());&#10;        return ResponseEntity.ok(AutoreResponse.from(autoreSalvato));&#10;    }&#10;&#10;    // Cancella autore&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteAutore(@PathVariable Long id) {&#10;        log.info(&quot;Richiesta per cancellare autore con ID: {}&quot;, id);&#10;        &#10;        if (!autoreRepository.existsById(id)) {&#10;            log.warn(&quot;Tentativo di cancellare autore inesistente con ID: {}&quot;, id);&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        autoreRepository.deleteById(id);&#10;        log.info(&quot;Autore con ID {} cancellato con successo&quot;, id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    // Ottieni o crea autore (endpoint che usa il servizio)&#10;    @PostMapping(&quot;/get-or-create&quot;)&#10;    public ResponseEntity&lt;AutoreResponse&gt; getOrCreateAutore(@RequestBody AutoreRequest request) {&#10;        log.info(&quot;Richiesta getOrCreate per autore: {}&quot;, request.nome());&#10;        &#10;        if (request.nome() == null || request.nome().isBlank()) {&#10;            log.warn(&quot;Tentativo di getOrCreate autore senza nome&quot;);&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;&#10;        Autore autore = autoreService.getOrCreate(request.nome(), request.descrizione());&#10;        &#10;        if (autore == null) {&#10;            log.error(&quot;Errore nel getOrCreate per autore: {}&quot;, request.nome());&#10;            return ResponseEntity.internalServerError().build();&#10;        }&#10;&#10;        log.info(&quot;GetOrCreate completato per autore: ID {}, Nome '{}'&quot;, autore.getId(), autore.getNome());&#10;        return ResponseEntity.ok(AutoreResponse.from(autore));&#10;    }&#10;&#10;    // Conta il numero totale di autori&#10;    @GetMapping(&quot;/count&quot;)&#10;    public long countAutori() {&#10;        long count = autoreRepository.count();&#10;        log.info(&quot;Richiesta conteggio autori: {}&quot;, count);&#10;        return count;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/autore/AutoreRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/autore/AutoreRepository.java" />
              <option name="originalContent" value="package me.leoo.springboot.libri.libri.autore;&#10;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import java.util.Optional;&#10;&#10;public interface AutoreRepository extends JpaRepository&lt;Autore, Long&gt; {&#10;    Optional&lt;Autore&gt; findByNome(String nome);&#10;    &#10;    &#10;}&#10;&#10;" />
              <option name="updatedContent" value="package me.leoo.springboot.libri.libri.autore;&#10;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface AutoreRepository extends JpaRepository&lt;Autore, Long&gt; {&#10;    Optional&lt;Autore&gt; findByNome(String nome);&#10;    List&lt;Autore&gt; findByNomeContainingIgnoreCase(String nome);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>