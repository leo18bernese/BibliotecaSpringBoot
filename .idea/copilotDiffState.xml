<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/DataLoader.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/DataLoader.java" />
              <option name="originalContent" value="package me.leoo.springboot.libri.libri;&#10;&#10;import me.leoo.springboot.libri.buono.Buono;&#10;import me.leoo.springboot.libri.buono.BuonoRepository;&#10;import me.leoo.springboot.libri.buono.StatoBuono;&#10;import me.leoo.springboot.libri.carrello.Carrello;&#10;import me.leoo.springboot.libri.carrello.CarrelloRepository;&#10;import me.leoo.springboot.libri.libri.autore.Autore;&#10;import me.leoo.springboot.libri.libri.autore.AutoreService;&#10;import me.leoo.springboot.libri.recensioni.Recensione;&#10;import me.leoo.springboot.libri.recensioni.RecensioneRepository;&#10;import me.leoo.springboot.libri.spedizione.SpedizioneIndirizzo;&#10;import me.leoo.springboot.libri.utente.Utente;&#10;import me.leoo.springboot.libri.utente.UtenteRepository;&#10;import me.leoo.springboot.libri.utente.UtenteService;&#10;import me.leoo.springboot.libri.utils.Sconto;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.CommandLineRunner;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;@Component&#10;public class DataLoader implements CommandLineRunner {&#10;&#10;    @Autowired&#10;    private LibroRepository libroRepository;&#10;&#10;    @Autowired&#10;    private UtenteRepository utenteRepository;&#10;&#10;    @Autowired&#10;    private CarrelloRepository carrelloRepository;&#10;&#10;    @Autowired&#10;    private RecensioneRepository recensioneRepository;&#10;&#10;    @Autowired&#10;    private UtenteService utenteService;&#10;&#10;    @Autowired&#10;    private BuonoRepository buonoRepository;&#10;&#10;    @Autowired&#10;    private AutoreService autoreService;&#10;&#10;    @Override&#10;    public void run(String... args) throws Exception {&#10;        if (libroRepository.existsById(1L)) {&#10;            System.out.println(&quot;Libri già caricati nel database, salto il caricamento&quot;);&#10;            return;&#10;        }&#10;&#10;        // Crea gli autori prima di creare i libri&#10;        Autore tolkien = autoreService.getOrCreate(&quot;J.R.R. Tolkien&quot;, &quot;Scrittore britannico, autore del Signore degli Anelli e Lo Hobbit&quot;);&#10;        Autore herbert = autoreService.getOrCreate(&quot;Frank Herbert&quot;, &quot;Scrittore americano di fantascienza, famoso per la saga di Dune&quot;);&#10;        Autore brown = autoreService.getOrCreate(&quot;Dan Brown&quot;, &quot;Scrittore americano famoso per i suoi thriller che mescolano storia, arte e religione&quot;);&#10;        Autore rowling = autoreService.getOrCreate(&quot;J.K. Rowling&quot;, &quot;Scrittrice britannica, creatrice della saga di Harry Potter&quot;);&#10;        Autore harari = autoreService.getOrCreate(&quot;Yuval Noah Harari&quot;, &quot;Storico e saggista israeliano, professore universitario e autore di bestseller&quot;);&#10;        Autore tamaro = autoreService.getOrCreate(&quot;Susanna Tamaro&quot;, &quot;Scrittrice italiana, famosa per i suoi romanzi emotivi e introspettivi&quot;);&#10;        Autore manzoni = autoreService.getOrCreate(&quot;Alessandro Manzoni&quot;, &quot;Scrittore e poeta italiano del XIX secolo, autore de I Promessi Sposi&quot;);&#10;        Autore schildt = autoreService.getOrCreate(&quot;Herbert Schildt&quot;, &quot;Programmatore e autore americano, esperto di linguaggi di programmazione&quot;);&#10;        Autore autoriVari = autoreService.getOrCreate(&quot;AA.VV.&quot;, &quot;Autori Vari - Raccolta di ricette della tradizione culinaria italiana&quot;);&#10;        Autore carr = autoreService.getOrCreate(&quot;Caleb Carr&quot;, &quot;Scrittore americano specializzato in thriller storici e psicologici&quot;);&#10;&#10;        // Crea i libri utilizzando il costruttore con oggetti Autore&#10;        libroRepository.save(new Libro(&quot;Il Signore degli Anelli&quot;, tolkien, &quot;Fantasy&quot;, 1954, 1200, &quot;George Allen &amp; Unwin&quot;, &quot;Italiano&quot;, &quot;9788845292613&quot;, 50, 25.00));&#10;        libroRepository.save(new Libro(&quot;Dune&quot;, herbert, &quot;Fantascienza&quot;, 1965, 800, &quot;Chilton Books&quot;, &quot;Italiano&quot;, &quot;9788834710186&quot;, 30, 20.50));&#10;        libroRepository.save(new Libro(&quot;Il Codice Da Vinci&quot;, brown, &quot;Thriller&quot;, 2003, 592, &quot;Doubleday&quot;, &quot;Italiano&quot;, &quot;9788804519962&quot;, 75, 15.75));&#10;        libroRepository.save(new Libro(&quot;Harry Potter e la Pietra Filosofale&quot;, rowling, &quot;Fantasy per ragazzi&quot;, 1997, 320, &quot;Bloomsbury Publishing&quot;, &quot;Italiano&quot;, &quot;9788869186641&quot;, 100, 12.99));&#10;        libroRepository.save(new Libro(&quot;Sapiens: Da animali a dèi&quot;, harari, &quot;Saggistica storica&quot;, 2011, 544, &quot;Bompiani&quot;, &quot;Italiano&quot;, &quot;9788845296833&quot;, 40, 18.90));&#10;        libroRepository.save(new Libro(&quot;Va' dove ti porta il cuore&quot;, tamaro, &quot;Romanzo&quot;, 1994, 192, &quot;Baldini &amp; Castoldi&quot;, &quot;Italiano&quot;, &quot;9788884901962&quot;, 60, 10.00));&#10;        libroRepository.save(new Libro(&quot;I Promessi Sposi&quot;, manzoni, &quot;Romanzo storico&quot;, 1840, 700, &quot;Ferrara&quot;, &quot;Italiano&quot;, &quot;9788809766940&quot;, 25, 14.50));&#10;        libroRepository.save(new Libro(&quot;Introduzione alla Programmazione in Java&quot;, schildt, &quot;Informatica&quot;, 2019, 1000, &quot;McGraw-Hill Education&quot;, &quot;Italiano&quot;, &quot;9780078022171&quot;, 15, 45.00));&#10;        Libro l = libroRepository.save(new Libro(&quot;La Cucina Italiana: Il Ricettario Completo&quot;, autoriVari, &quot;Cucina&quot;, 2010, 600, &quot;Editoriale Domus&quot;, &quot;Italiano&quot;, &quot;9788872126285&quot;, 20, 30.00));&#10;        libroRepository.save(new Libro(&quot;L'Alienista&quot;, carr, &quot;Thriller psicologico&quot;, 1994, 480, &quot;Rizzoli&quot;, &quot;Italiano&quot;, &quot;9788817024469&quot;, 35, 16.25));&#10;&#10;        List&lt;Libro&gt; libri = libroRepository.findAll();&#10;        System.out.println(&quot;Libri caricati nel database: &quot; + libri.size());&#10;&#10;        SpedizioneIndirizzo ind1 = new SpedizioneIndirizzo(&quot;Mario Rossi&quot;, &quot;Via Roma 1&quot;, &quot;Milano&quot;, &quot;MI&quot;, &quot;20100&quot;, &quot;1234567890&quot;);&#10;        SpedizioneIndirizzo ind2 = new SpedizioneIndirizzo(&quot;Luigi Bianchi&quot;, &quot;Via Milano 2&quot;, &quot;Roma&quot;, &quot;RM&quot;, &quot;00100&quot;, &quot;0987654321&quot;);&#10;&#10;        Utente u = new Utente(&quot;Daniel18&quot;, &quot;ciao1234&quot;, &quot;Daniel&quot;, &quot;Bello&quot;, &quot;daniel@gmail.com&quot;);&#10;        u.addToWishlist(l);&#10;        u.addIndirizzo(ind1);&#10;        u.addIndirizzo(ind2);&#10;        Utente uu = utenteService.register(u);&#10;&#10;        Carrello carrello = new Carrello(uu);&#10;        carrelloRepository.save(carrello);&#10;&#10;        for (Libro libro : libri) {&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                Recensione recensione = new Recensione(libro.getId(), uu.getId(), &quot;Molto bello&quot;, &quot;Ottimo libro, lo consiglio&quot;, 4, true, true);&#10;                Recensione r = recensioneRepository.save(recensione);&#10;&#10;                libro.getRecensioni().add(r.getId());&#10;            }&#10;&#10;            libroRepository.save(libro);&#10;        }&#10;&#10;&#10;        // Buono sconto del 20% senza data di scadenza&#10;        Buono buono1 = new Buono(&#10;                &quot;SCONTO20&quot;,&#10;                new Sconto(20, 0),&#10;                new Date(),&#10;                null,&#10;                0,&#10;                5,&#10;                50,&#10;                false,&#10;                null,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono1);&#10;&#10;// Buono sconto fisso di 15€ con scadenza tra 30 giorni&#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.add(Calendar.DAY_OF_MONTH, 30);&#10;        Date scadenza = calendar.getTime();&#10;        Buono buono2 = new Buono(&#10;                &quot;MENO15EURO&quot;,&#10;                new Sconto(0, 15),&#10;                new Date(),&#10;                scadenza,&#10;                0,&#10;                1,&#10;                100,&#10;                false,&#10;                uu,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono2);&#10;&#10;// Buono sconto del 50% per un utente specifico&#10;        Buono buono3 = new Buono(&#10;                &quot;VIP50&quot;,&#10;                new Sconto(50, 0),&#10;                new Date(),&#10;                null,&#10;                0,&#10;                1,&#10;                0,&#10;                false,&#10;                uu,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono3);&#10;&#10;// Buono sconto di 5€ cumulabile con altri buoni&#10;        Buono buono4 = new Buono(&#10;                &quot;EXTRA5&quot;,&#10;                new Sconto(0, 5),&#10;                new Date(),&#10;                null,&#10;                0,&#10;                10,&#10;                20,&#10;                true,&#10;                null,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono4);&#10;&#10;// Buono sconto 30% non ancora attivo (futuro)&#10;        Calendar futureStart = Calendar.getInstance();&#10;        futureStart.add(Calendar.MONTH, 1);&#10;        Calendar futureEnd = Calendar.getInstance();&#10;        futureEnd.add(Calendar.MONTH, 2);&#10;        Buono buono5 = new Buono(&#10;                &quot;ESTATE30&quot;,&#10;                new Sconto(30, 0),&#10;                futureStart.getTime(),&#10;                futureEnd.getTime(),&#10;                0,&#10;                50,&#10;                0,&#10;                false,&#10;                null,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono5);&#10;&#10;&#10;        System.out.println(&quot;Libri caricati nel database&quot;);&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package me.leoo.springboot.libri.libri;&#10;&#10;import me.leoo.springboot.libri.buono.Buono;&#10;import me.leoo.springboot.libri.buono.BuonoRepository;&#10;import me.leoo.springboot.libri.buono.StatoBuono;&#10;import me.leoo.springboot.libri.carrello.Carrello;&#10;import me.leoo.springboot.libri.carrello.CarrelloRepository;&#10;import me.leoo.springboot.libri.recensioni.Recensione;&#10;import me.leoo.springboot.libri.recensioni.RecensioneRepository;&#10;import me.leoo.springboot.libri.spedizione.SpedizioneIndirizzo;&#10;import me.leoo.springboot.libri.utente.Utente;&#10;import me.leoo.springboot.libri.utente.UtenteRepository;&#10;import me.leoo.springboot.libri.utente.UtenteService;&#10;import me.leoo.springboot.libri.utils.Sconto;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.CommandLineRunner;&#10;import org.springframework.core.annotation.Order;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;@Component&#10;@Order(2) // Esegue dopo LibroDataLoader&#10;public class DataLoader implements CommandLineRunner {&#10;&#10;    @Autowired&#10;    private LibroRepository libroRepository;&#10;&#10;    @Autowired&#10;    private UtenteRepository utenteRepository;&#10;&#10;    @Autowired&#10;    private CarrelloRepository carrelloRepository;&#10;&#10;    @Autowired&#10;    private RecensioneRepository recensioneRepository;&#10;&#10;    @Autowired&#10;    private UtenteService utenteService;&#10;&#10;    @Autowired&#10;    private BuonoRepository buonoRepository;&#10;&#10;    @Override&#10;    public void run(String... args) throws Exception {&#10;        if (utenteRepository.findByUsername(&quot;Daniel18&quot;).isPresent()) {&#10;            System.out.println(&quot;Dati utenti e buoni già caricati nel database, salto il caricamento&quot;);&#10;            return;&#10;        }&#10;&#10;        System.out.println(&quot;Caricamento utenti, carrelli, recensioni e buoni nel database...&quot;);&#10;&#10;        // Crea utente di test&#10;        SpedizioneIndirizzo ind1 = new SpedizioneIndirizzo(&quot;Mario Rossi&quot;, &quot;Via Roma 1&quot;, &quot;Milano&quot;, &quot;MI&quot;, &quot;20100&quot;, &quot;1234567890&quot;);&#10;        SpedizioneIndirizzo ind2 = new SpedizioneIndirizzo(&quot;Luigi Bianchi&quot;, &quot;Via Milano 2&quot;, &quot;Roma&quot;, &quot;RM&quot;, &quot;00100&quot;, &quot;0987654321&quot;);&#10;&#10;        Utente u = new Utente(&quot;Daniel18&quot;, &quot;ciao1234&quot;, &quot;Daniel&quot;, &quot;Bello&quot;, &quot;daniel@gmail.com&quot;);&#10;        &#10;        // Aggiungi un libro alla wishlist se esistono libri&#10;        List&lt;Libro&gt; libri = libroRepository.findAll();&#10;        if (!libri.isEmpty()) {&#10;            u.addToWishlist(libri.get(0)); // Aggiungi il primo libro alla wishlist&#10;        }&#10;        &#10;        u.addIndirizzo(ind1);&#10;        u.addIndirizzo(ind2);&#10;        Utente uu = utenteService.register(u);&#10;&#10;        // Crea carrello per l'utente&#10;        Carrello carrello = new Carrello(uu);&#10;        carrelloRepository.save(carrello);&#10;&#10;        // Crea recensioni per i libri esistenti&#10;        for (Libro libro : libri) {&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                Recensione recensione = new Recensione(libro.getId(), uu.getId(), &quot;Molto bello&quot;, &quot;Ottimo libro, lo consiglio&quot;, 4, true, true);&#10;                Recensione r = recensioneRepository.save(recensione);&#10;&#10;                libro.getRecensioni().add(r.getId());&#10;            }&#10;            libroRepository.save(libro);&#10;        }&#10;&#10;        // Crea buoni sconto&#10;        // Buono sconto del 20% senza data di scadenza&#10;        Buono buono1 = new Buono(&#10;                &quot;SCONTO20&quot;,&#10;                new Sconto(20, 0),&#10;                new Date(),&#10;                null,&#10;                0,&#10;                5,&#10;                50,&#10;                false,&#10;                null,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono1);&#10;&#10;        // Buono sconto fisso di 15€ con scadenza tra 30 giorni&#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.add(Calendar.DAY_OF_MONTH, 30);&#10;        Date scadenza = calendar.getTime();&#10;        Buono buono2 = new Buono(&#10;                &quot;MENO15EURO&quot;,&#10;                new Sconto(0, 15),&#10;                new Date(),&#10;                scadenza,&#10;                0,&#10;                1,&#10;                100,&#10;                false,&#10;                uu,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono2);&#10;&#10;        // Buono sconto del 50% per un utente specifico&#10;        Buono buono3 = new Buono(&#10;                &quot;VIP50&quot;,&#10;                new Sconto(50, 0),&#10;                new Date(),&#10;                null,&#10;                0,&#10;                1,&#10;                0,&#10;                false,&#10;                uu,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono3);&#10;&#10;        // Buono sconto di 5€ cumulabile con altri buoni&#10;        Buono buono4 = new Buono(&#10;                &quot;EXTRA5&quot;,&#10;                new Sconto(0, 5),&#10;                new Date(),&#10;                null,&#10;                0,&#10;                10,&#10;                20,&#10;                true,&#10;                null,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono4);&#10;&#10;        // Buono sconto 30% non ancora attivo (futuro)&#10;        Calendar futureStart = Calendar.getInstance();&#10;        futureStart.add(Calendar.MONTH, 1);&#10;        Calendar futureEnd = Calendar.getInstance();&#10;        futureEnd.add(Calendar.MONTH, 2);&#10;        Buono buono5 = new Buono(&#10;                &quot;ESTATE30&quot;,&#10;                new Sconto(30, 0),&#10;                futureStart.getTime(),&#10;                futureEnd.getTime(),&#10;                0,&#10;                50,&#10;                0,&#10;                false,&#10;                null,&#10;                StatoBuono.ATTIVO&#10;        );&#10;        buonoRepository.save(buono5);&#10;&#10;        System.out.println(&quot;Dati utenti e buoni caricati nel database&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/LibroDataLoader.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/LibroDataLoader.java" />
              <option name="updatedContent" value="package me.leoo.springboot.libri.libri;&#10;&#10;import me.leoo.springboot.libri.libri.autore.Autore;&#10;import me.leoo.springboot.libri.libri.autore.AutoreService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.CommandLineRunner;&#10;import org.springframework.core.annotation.Order;&#10;import org.springframework.stereotype.Component;&#10;&#10;@Component&#10;@Order(1) // Esegue prima degli altri DataLoader&#10;public class LibroDataLoader implements CommandLineRunner {&#10;&#10;    @Autowired&#10;    private LibroRepository libroRepository;&#10;&#10;    @Autowired&#10;    private AutoreService autoreService;&#10;&#10;    @Override&#10;    public void run(String... args) throws Exception {&#10;        if (libroRepository.existsById(1L)) {&#10;            System.out.println(&quot;Libri già caricati nel database, salto il caricamento&quot;);&#10;            return;&#10;        }&#10;&#10;        System.out.println(&quot;Caricamento libri e autori nel database...&quot;);&#10;&#10;        // Crea gli autori prima di creare i libri&#10;        Autore tolkien = autoreService.getOrCreate(&quot;J.R.R. Tolkien&quot;, &quot;Scrittore britannico, autore del Signore degli Anelli e Lo Hobbit&quot;);&#10;        Autore herbert = autoreService.getOrCreate(&quot;Frank Herbert&quot;, &quot;Scrittore americano di fantascienza, famoso per la saga di Dune&quot;);&#10;        Autore brown = autoreService.getOrCreate(&quot;Dan Brown&quot;, &quot;Scrittore americano famoso per i suoi thriller che mescolano storia, arte e religione&quot;);&#10;        Autore rowling = autoreService.getOrCreate(&quot;J.K. Rowling&quot;, &quot;Scrittrice britannica, creatrice della saga di Harry Potter&quot;);&#10;        Autore harari = autoreService.getOrCreate(&quot;Yuval Noah Harari&quot;, &quot;Storico e saggista israeliano, professore universitario e autore di bestseller&quot;);&#10;        Autore tamaro = autoreService.getOrCreate(&quot;Susanna Tamaro&quot;, &quot;Scrittrice italiana, famosa per i suoi romanzi emotivi e introspettivi&quot;);&#10;        Autore manzoni = autoreService.getOrCreate(&quot;Alessandro Manzoni&quot;, &quot;Scrittore e poeta italiano del XIX secolo, autore de I Promessi Sposi&quot;);&#10;        Autore schildt = autoreService.getOrCreate(&quot;Herbert Schildt&quot;, &quot;Programmatore e autore americano, esperto di linguaggi di programmazione&quot;);&#10;        Autore autoriVari = autoreService.getOrCreate(&quot;AA.VV.&quot;, &quot;Autori Vari - Raccolta di ricette della tradizione culinaria italiana&quot;);&#10;        Autore carr = autoreService.getOrCreate(&quot;Caleb Carr&quot;, &quot;Scrittore americano specializzato in thriller storici e psicologici&quot;);&#10;&#10;        // Crea i libri utilizzando il costruttore con oggetti Autore&#10;        libroRepository.save(new Libro(&quot;Il Signore degli Anelli&quot;, tolkien, &quot;Fantasy&quot;, 1954, 1200, &quot;George Allen &amp; Unwin&quot;, &quot;Italiano&quot;, &quot;9788845292613&quot;, 50, 25.00));&#10;        libroRepository.save(new Libro(&quot;Dune&quot;, herbert, &quot;Fantascienza&quot;, 1965, 800, &quot;Chilton Books&quot;, &quot;Italiano&quot;, &quot;9788834710186&quot;, 30, 20.50));&#10;        libroRepository.save(new Libro(&quot;Il Codice Da Vinci&quot;, brown, &quot;Thriller&quot;, 2003, 592, &quot;Doubleday&quot;, &quot;Italiano&quot;, &quot;9788804519962&quot;, 75, 15.75));&#10;        libroRepository.save(new Libro(&quot;Harry Potter e la Pietra Filosofale&quot;, rowling, &quot;Fantasy per ragazzi&quot;, 1997, 320, &quot;Bloomsbury Publishing&quot;, &quot;Italiano&quot;, &quot;9788869186641&quot;, 100, 12.99));&#10;        libroRepository.save(new Libro(&quot;Sapiens: Da animali a dèi&quot;, harari, &quot;Saggistica storica&quot;, 2011, 544, &quot;Bompiani&quot;, &quot;Italiano&quot;, &quot;9788845296833&quot;, 40, 18.90));&#10;        libroRepository.save(new Libro(&quot;Va' dove ti porta il cuore&quot;, tamaro, &quot;Romanzo&quot;, 1994, 192, &quot;Baldini &amp; Castoldi&quot;, &quot;Italiano&quot;, &quot;9788884901962&quot;, 60, 10.00));&#10;        libroRepository.save(new Libro(&quot;I Promessi Sposi&quot;, manzoni, &quot;Romanzo storico&quot;, 1840, 700, &quot;Ferrara&quot;, &quot;Italiano&quot;, &quot;9788809766940&quot;, 25, 14.50));&#10;        libroRepository.save(new Libro(&quot;Introduzione alla Programmazione in Java&quot;, schildt, &quot;Informatica&quot;, 2019, 1000, &quot;McGraw-Hill Education&quot;, &quot;Italiano&quot;, &quot;9780078022171&quot;, 15, 45.00));&#10;        libroRepository.save(new Libro(&quot;La Cucina Italiana: Il Ricettario Completo&quot;, autoriVari, &quot;Cucina&quot;, 2010, 600, &quot;Editoriale Domus&quot;, &quot;Italiano&quot;, &quot;9788872126285&quot;, 20, 30.00));&#10;        libroRepository.save(new Libro(&quot;L'Alienista&quot;, carr, &quot;Thriller psicologico&quot;, 1994, 480, &quot;Rizzoli&quot;, &quot;Italiano&quot;, &quot;9788817024469&quot;, 35, 16.25));&#10;&#10;        System.out.println(&quot;Libri e autori caricati nel database: &quot; + libroRepository.count() + &quot; libri&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/autore/AutoreRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/me/leoo/springboot/libri/libri/autore/AutoreRepository.java" />
              <option name="originalContent" value="package me.leoo.springboot.libri.libri.autore;&#10;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import java.util.Optional;&#10;&#10;public interface AutoreRepository extends JpaRepository&lt;Autore, Long&gt; {&#10;    Optional&lt;Autore&gt; findByNome(String nome);&#10;    &#10;    &#10;}&#10;&#10;" />
              <option name="updatedContent" value="package me.leoo.springboot.libri.libri.autore;&#10;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface AutoreRepository extends JpaRepository&lt;Autore, Long&gt; {&#10;    Optional&lt;Autore&gt; findByNome(String nome);&#10;    List&lt;Autore&gt; findByNomeContainingIgnoreCase(String nome);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>